

中断与系统调用

    中断是操作系统的生命线，时钟中断是操作系统的脉搏。
    中断是内核真正的入口。

中断

    当一个程序运行时，可能被动的发生中断或者主动的产生中断，此时该程序在用户态的信息被保存，程序陷入内核执行。

    内核所有的执行过程都发生在被中断进程的内核态栈中。

    当内核程序执行结束时，会返回到用户态程序，此时程序的状态被恢复，程序继续执行，而程序并没有察觉到被中断，仿佛一直在运行一样。



    中断有多种类型，主要分为
        处理器保留中断（int0-31），
        硬件中断（int32-47, 即irq0-15），
        系统调用中断（int0x80, 即int128）
        以及其他自定义的中断。
    
    处理器保留中断包括除零，断点，缺页，一般保护性错误等等；
    硬件中断主要是来自外部设备的中断，包括时钟，硬盘，软盘，键盘等等；
    系统调用中断是一种软件中断，由应用程序发出，以使用内核提供的服务。

    通常系统最多有256个中断，系统维护了一张中断向量表，表中每一项指向一个对应中断的中断处理程序。
    当中断发生时，CPU自动保存当前任务状态，并根据中断向量表跳转到指定的中断处理程序执行。
    所有中断处理程序运行在内核栈中。

    下面主要时钟中断和系统调用的处理过程。

时钟中断

    当程序运行过程中发生时钟中断时，当前程序运行状态被保存，CPU根据中断向量表跳转到时钟中断处理程序。
    如果原来的程序是用户态程序，那么此时还会发生堆栈切换，堆栈切换为被中断程序的内核态堆栈。

    时钟中断处理程序首先保存CPU寄存器状态（包括通用寄存器和段寄存器等），接着将系统运行的jiffies加1（jiffies是系统运行的滴答数，即发生了多少次时钟中断），然后调用do_timer这个具体的时钟中断处理C程序，
    do_timer会根据中断前运行的程序特权级将该进程的用户态运行时间或者内核态运行时间加1，然后处理定时器，最后调用调度程序，此时程序可能会被切换，此时程序的状态被保存，CPU执行其他的进程。
    当程序再次运行时，do_timer处理过程结束，返回时钟中断处理程序，时钟中断处理程序跳转到ret_form_sys_call，ret_from_sys_call处理关于进程信号的工作，最后中断处理程序返回， 被中断程序继续执行。

系统调用

    系统调用是内核向用户程序提供服务的唯一接口，用户程序通过int0x80主动陷入内核，使内核执行系统调用。

    当用户程序执行int0x80时，CPU收到中断，通过中断向量表跳转到系统调用中断处理程序，并同时切换到进程的内核态堆栈。

    系统调用中断处理程序首先检查调用号是否合法，不合法直接返回-1。合法则保存寄存器状态到堆栈上，然后通过sys_call_table跳转到具体的系统调用处理程序。sys_call_table是一张函数指针表，以系统调用号为索引，存储着对应的系统调用处理程序的指针。

    当具体的系统调用处理程序返回后，中断处理程序跳转到ret_from_sys_call。如果被中断程序是用户程序，则首先进行调度，调度完成跳转到ret_from_sys_call。

    如果被中断程序是用户态程序，那么ret_from_sys_call执行do_signal,不是则不执行。

    最后系统调用中断处理过程结束，返回被中断程序，被中断程序继续执行。


下面介绍调度程序。

    调度是内核的核心功能之一，也是多程序并行的基础。
    调度分为两个部分：调度算法与调度执行。调度算法选择出切换到哪一个进程，调度执行会切换到该进程。
    Linux-0.11的调度算法是基于剩余时间的选择算法，当一个进程的时间片用完时就会被挂起，处理器切换到别的程序运行。

    执行调度的是是switch_to，这是一个用宏写的函数。switch_to
    会改变current指针，然后长跳转到被选中进程的TSS描述符。处理器会自动执行原任务的状态保存以及新任务的状态加载。
    此时原任务会在内核态栈上被阻塞在shchedule函数中。



下面以sys_fork系统调用。

    sys_fork运行在由系统调用中断处理程序所使用的栈中。

    sys_fork的功能是复制当前进程形成一个新的子进程。
    //主要操作是复制task_struct结构以及对应的页表。

    sys_fork首先调用find_empty_process,在task_struct数组中找到一个空的位置，然后执行copy_process，copy_process会将父进程的任务结构信息复制到找到的task_struct中，需要注意的是%eax需要修改成0，作为fork的返回值。

    sys_fork执行完成后会返回系统调用中断处理程序，然后系统调用中断处理程序返回用户态程序中。

    所有系统调用的处理过程都如上所述，首先用户程序执行int0x80陷入内核，CPU通过中断向量表跳转到系统调用处理程序，并同时切换到进程的内核态栈中。中断系统调用中断处理程序调用具体的系统调用处理程序，在处理程序返回后进行调度和信号处理，最后返回用户态程序中。
    所有系统调用处理程序都运行在相应进程的内核态栈中。
    //如果调度时被阻塞，也是阻塞在内核态栈上。


    综上可知，中断是内核真正的入口，内核本质上就是一组中断处理程序，所有中断处理程序运行在被中断进程的内核态栈上，包括系统调用中断处理程序，以及由系统调用中断处理程序所调用的一系列程序。

    内核本质上就是一组会在任意时刻，任意进程下执行的中断处理程序，而如何在这种混乱的状况下维护内核统一的状态，是内核的职责与艺术。




    




