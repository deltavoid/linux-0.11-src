

linux-0.11内核源码阅读感想
15101057 张乾宇


1.概述

    本文基于Linux0.11内核。linux-0.11是Linux的早期内核，阅读早期内核的优点是代码量少，能够对内核整体有一个直观的认识，缺点是早期内核与现代内核相比许多实现方式显得十分落后。

    内核是操作系统的核心，提供操作系统最基础的功能。内核担负起进程控制，硬件抽象，资源调度等等职能，并保证系统能够稳定的运行。

    内核的上层是进程，内核所有的功能都是为进程服务。
    内核的下层是硬件，内核需要使用硬件的功能，同时也需要控制硬件的行为。最核心的硬件是CPU。

    现代内核最主要的特征是多道程序运行能力，即如何把一份CPU、内存抽象成多个进程同时使用的CPU、内存，使得各个进程之间互不影响。
    内核在保证进程隔离的同时还要提供进程通信的能力，并且协调多个进程对同一资源的访问。

    linux-0.11内核主要分为进程控制，内存管理，文件系统，设备管理等几个模块。

2.程序运行原理

    进程是操作系统服务的对象。
    程序在从磁盘加载到内存中运行之后才称为进程。进程是一个运行的程序实例。

    一个程序在内存中至少需有三个部分：代码段，数据段，堆栈段。

    程序运行时，CPU从代码段一条一条的取出指令执行。
    某一时刻程序运行的状态保存在CPU的寄存器中。

    假设某一时刻程序运行的CPU状态被保存，程序停止执行，然后在另一时刻CPU的状态被恢复，程序从被中断的重新开始执行，
    这样运行的结果和程序一直在运行的结果是一样的，即对程序而言，它好像没有被中断而一直在运行一样。
    这是程序能够被中断以及切换的基础。

3.task_struct与内核态堆栈

    内核为每一个进程维护着一个task_struct结构体。
    一个task_struct至少包含state, counter, priority, signal, pid, file等数据或结构。

    在linux-0.11中task_struct还包含两个内容：
    ldt（local descriptor table)局部描述符表，记录着进程所使用的代码段，数据段等虚拟地址空间的信息。
    tss(task state struct)任务状态段，记录着处理器寄存器等任务运行的信息，是CPU进行任务切换的基础。

    同时内核还为每个进程分配一个内核态栈，当程序由于中断或系统调用而陷入内核时，内核代码在该进程的内核态栈上执行。

4.中断与系统调用

    中断是操作系统的生命线，时钟中断是操作系统的脉搏。
    中断是内核真正的入口。

4.1.中断

    当一个程序运行时，可能被动的发生中断或者主动的产生中断，此时该程序在用户态的信息被保存，程序陷入内核执行。
    
    内核所有的执行过程都发生在被中断进程的内核态栈中。
    
    当内核程序执行结束时，会返回到用户态程序，此时程序的状态被恢复，程序继续执行，而程序并没有察觉到被中断，仿佛一直在运行一样。

    中断有多种类型，主要分为
        处理器保留中断（int0-31），
        硬件中断（int32-47, 即irq0-15），
        系统调用中断（int0x80, 即int128）
        以及其他自定义的中断。
    
    处理器保留中断包括除零，断点，缺页，一般保护性错误等等；
    硬件中断主要是来自外部设备的中断，包括时钟，硬盘，软盘，键盘等等；
    系统调用中断是一种软件中断，由应用程序发出，以使用内核提供的服务。

    通常系统最多有256个中断，系统维护了一张中断向量表，表中每一项指向一个对应中断的中断处理程序。
    当中断发生时，CPU自动保存当前任务状态，并根据中断向量表跳转到指定的中断处理程序执行。
    所有中断处理程序运行在内核栈中。

4.2.时钟中断

    时间中断是由系统时钟定时发出的中断。

    当程序运行过程中发生时钟中断时，当前程序运行状态被保存，CPU根据中断向量表跳转到时钟中断处理程序。
    如果原来的程序是用户态程序，那么此时还会发生堆栈切换，堆栈切换为被中断程序的内核态堆栈。

    时钟中断处理程序首先保存CPU寄存器状态（包括通用寄存器和段寄存器等），接着将系统运行的jiffies加1（jiffies是系统运行的滴答数，即发生了多少次时钟中断），然后调用do_timer这个具体的时钟中断处理C程序，
    do_timer会根据中断前运行的程序特权级将该进程的用户态运行时间或者内核态运行时间加1，然后处理定时器，最后调用调度程序，此时程序可能会被切换，则程序的状态被保存，CPU执行其他的进程。
    当程序再次运行时，do_timer处理过程结束，返回时钟中断处理程序，时钟中断处理程序跳转到ret_form_sys_call，ret_from_sys_call处理关于进程信号的工作，最后中断处理程序返回，被中断程序继续执行。

4.3.系统调用

    系统调用是内核向用户程序提供服务的唯一接口，用户程序通过int0x80主动陷入内核，使内核执行系统调用。

    当用户程序执行int0x80时，CPU收到中断，通过中断向量表跳转到系统调用中断处理程序，并同时切换到进程的内核态堆栈。

    系统调用中断处理程序首先检查调用号是否合法，不合法直接返回-1。合法则保存寄存器状态到堆栈上，然后通过sys_call_table跳转到具体的系统调用处理程序。sys_call_table是一张函数指针表，以系统调用号为索引，存储着对应的系统调用处理程序的指针。

    当具体的系统调用处理程序返回后，中断处理程序跳转到ret_from_sys_call。如果被中断程序是用户程序，则首先进行调度，调度完成跳转到ret_from_sys_call。

    如果被中断程序是用户态程序，那么ret_from_sys_call执行do_signal,不是则不执行。

    最后系统调用中断处理过程结束，返回被中断程序，被中断程序继续执行。


4.4.调度程序。

    调度是内核的核心功能之一，也是多程序并行的基础。
    调度分为两个部分：调度算法与调度执行。调度算法选择出切换到哪一个进程，调度执行会切换到该进程。

    Linux-0.11的调度算法是基于剩余时间的选择算法，当一个进程的时间片用完时就会被挂起，处理器切换到别的程序运行。

    执行调度的是是switch_to，这是一个用宏写的函数。switch_to
    会改变current指针，然后长跳转到被选中进程的TSS描述符。处理器会自动执行原任务的状态保存以及新任务的状态加载。
    此时原任务会在内核态栈上被阻塞在shchedule函数中。

4.5.fork系统调用。

    sys_fork运行在由系统调用中断处理程序所使用的内核态栈中。

    sys_fork的功能是复制当前进程形成一个新的子进程。

    sys_fork首先调用find_empty_process,在task_struct数组中找到一个空的位置，然后执行copy_process，copy_process会将父进程的任务结构信息复制到找到的task_struct中，需要注意的是%eax需要修改成0，作为fork的返回值。

    sys_fork执行完成后会返回系统调用中断处理程序，然后系统调用中断处理程序返回用户态程序中。

    所有系统调用的处理过程都如上所述，首先用户程序执行int0x80陷入内核，CPU通过中断向量表跳转到系统调用处理程序，并同时切换到进程的内核态栈中。中断系统调用中断处理程序调用具体的系统调用处理程序，在处理程序返回后进行调度和信号处理，最后返回用户态程序中。
    所有系统调用处理程序都运行在相应进程的内核态栈中。

4.6.小结

    综上可知，中断是内核真正的入口，内核本质上就是一组中断处理程序，所有中断处理程序运行在被中断进程的内核态栈上，包括系统调用中断处理程序，以及由系统调用中断处理程序所调用的一系列程序。

    内核本质上就是一组会在任意时刻，任意进程下执行的中断处理程序，而如何在这种混乱的状况下维护内核统一的状态，是内核的职责与艺术。

5.内存

5.1.三级地址映射

    linux-0.11中使用的三级地址映射，并同时使用了分段和分页机制。
    三级地址是虚拟地址，线性地址，物理地址。
    虚拟地址是程序使用的地址。线性地址是处理器用来寻址的地址。物理地址是数据在物理内存中实际的地址。
    虚拟地址经过分段机制之后就变成线性地址，线性地址经过分页机制之后就变成物理地址。

5.2.分段机制

    分段机制使用GDT表和LDT表首先。
    GDT（Global Descriptor Table）存放全局段的描述符。
    LDT（Local Descriptor Table）存放局部段的描述符。
    每一个段描述符由三个部分组成：段基址，段限长，段属性。
    虚拟地址加上段基址之后即是线性地址。虚拟地址必须在段限长的范围内，否则非法。段属性用来描述段的特征以及判断虚拟地址是否合法。

5.3.分页机制

    分页机制使用二级页表实现。
    32位CPU支持4GB线性地址空间，这4GB地址空间被划分为2^20个4KB的页。页表即是用来将线性地址空间中的页映射到物理地址空间的页上。
    因为使用4KB的页所以所有页的起始地址的低12位都是0，只需提供高20位即可完成映射，因此低12位可以用来存放一些属性信息。
    高20位被分为2段，其中高10位用于页目录表的索引，低10位用于页表的索引。
    下面简述页表寻址的流程。
    对于一个32位的线性地址，首先根据将最高10位作为索引在页目录表中寻找到到对应的页表的物理地址，然后根据中间10位作为索引找到对应页的物理地址，最后低12位作为业内偏移即可找到对应数据的物理地址。

5.4.需求加载与写时复制

    页目录表和页表的低12位因为不参与映射，因此可以用来存放一些属性信息，比如存在位和读写位。

    当存在位置位时，说明该页在物理内存中存在，可以直接使用，否则说明该页在磁盘缓存中，此时处理器会产生一个页面异常，然后页面异常中断处理程序调用缺页处理程序do_no_page，将需要的页面交换到内存中。这称为需求加载。

    内核在执行execve系统调用时，只是设置了相应的页表，并没有将程序真实复制到内存中，当程序运行产生缺页异常时，内核才会通过缺页异常处理程序将程序页面加载到内存中。
    
    当发生页面写保护时，可能是因为父进程与子进程共享页面，此时处理器也会产生一个页面异常，然后页面异常中断处理程序调用写保护处理程序do_wp_page，处理程序分配新的页面，然后重新执行程序。

    当内核执行fork系统调用时也没有真实复制父进程的代码和数据，而是在子进程的页表中指向父进程的数据，并且将相应页面设置为只读，这样当一个进程试图写入数据时就会产生写保护异常，此时内核才会真实的为进程分配物理内存分配页面。

    缺页异常与写保护异常共用一个系统中断号，成为页面异常。页面异常中断处理程序会根据CPU提供的信息调用具体的处理程序。

    当一个页面长期不使用时就可能被交换出物理内存，然后在使用时重新交换回物理内存中。这是虚拟内存的工作原理，虚拟内存可以使程序觉得使用了比物理内存大得多的内存。

6.文件系统

6.1.文件系统环境与任务

    文件系统的上层是文件系统接口，这个接口通常以一棵文件目录树呈现（严格的说其实是有限状态自动机，因为支持硬连接）。
    文件由系统调用中断处理程序或其他内核程序调用，因此文件系统程序也运行在被中断进程的内核态栈中。
    文件系统的下层是设备驱动程序。典型的驱动是硬盘驱动程序。硬盘驱动程序将硬盘抽象成一个巨大的字节数组供文件系统使用。
    文件系统对设备的使用还要经过一层缓冲区。文件系统对所有数据的读写都需要首先将块设备中的数据读到缓冲区中然后再进行读写，最后再将数据写回到块设备中。可以说缓冲区封装了文件系统对设备的使用，以提供更高的读写速度。

    因此文件系统的本质是：使用一种算法，将巨大的字节数组组织成文件目录树。

6.2.文件系统实现

    Linux-0.11使用的是minix1.0的文件系统，主要使用inode实现。

    磁盘首先被分为几个区：引导块，超级块，i节点位图，逻辑块位图，i节点区和数据区。
    引导块用于系统引导，占用磁盘第一个扇区。
    超级块存储描述文件系统的信息。
    i节点位图记录i节点的使用情况。
    逻辑块位图记录逻辑块的使用情况。
    i节点区存储所有的i节点。
    数据区存储所有的逻辑块。

6.3.i节点
    
    每个i节点然后会记录节点类型，用户号，文件长度，修改时间等信息。
    然后会记录文件具体存放在哪些逻辑块中。
    i节点使用数组i_zone[9]来记录逻辑块信息。
    i_zone[0-6]直接存放数据块号。
    i_zone[7]存放一次间接块的块号，一次间接块里存放1024个数据块的块号。
    i_zone[8]存放二次间接块的块号，二次间接块里存放1024个一次间接块的块号，一次间接块再存放1024个数据块的块号。

6.4.文件类型

    linux-0.11的文件系统中支持多种文件类型，主要有：正规文件，目录文件，块设备文件，字符设备文件，管道文件，符号链接文件。
    正规文件即是普通文件。
    目录文件的文件内容里存放的是条目名与对应的i节点。
    符号链接文件存放指向一个i节点的路径名。
    块设备文件和字符设备文件都描述一个设备。
    管道文件表示一个管道。
    文件系统会对不同类型的文件采用不同的文件操作。

6.5.namei
    
    namei主要将路径名解析到对应的i节点。
    路径名是形如/dir1/dir2/dir3/.../dirn/的字符串，/作为分隔符，分隔符间的字符串作为目录名。
    路径解析首先从根节点开始，在根节点的目录条目中找到dir1对应的i节点，即是/dir1/对应的i节点。
    跳转到/dir1/对应的节点后解析dir2，找到dir2对应的条目，跳抓到/dir1/dir2/对应的i节点。
    这样一直跳转下去，知道解析到最后一层，即是目标i节点。

    Linux是一个宏内核，因此文件系统作为内核的一部分也运行在进程的内核态栈中。

7.设备

    linux-0.11将设备分为两类，字符设备和块设备。
    字符设备是只能顺序读取或写入的设备。
    块设备以数据块为操作单位的设备。
    
7.1.设备驱动

    下面主要以硬盘为例介绍基于中断的设备驱动程序。

    硬盘是一个块设备，以块位单位对数据进行读取和写入操作。

    内核为每个设备维护一个请求队列，记录该设备需要完成的请求。

    当内核产生一个设备请求时，如果设备请求队列为空，说明设备当前没有请求，就直接处理请求，否则就将请求插入到请求队列中。

    当设备完成一个请求时，就会想处理器发送一个中断，处理器会执行相应的中断处理程序。
    中断处理程序首先释放已完成的请求，并唤醒阻塞在该请求上的进程，如果请求队列中还有项，就会继续执行请求，然后退出中断。
    然后新的请求完成时又会产生新的中断，直到请求队列中没有未完成的请求，则处理结束。


    
 8.总结

    linux-0.11主要分为进程控制，内存管理，文件系统，设备管理等几个模块。
   
    中断是内核的入口，内核态栈是内核执行的环境。

    内核本质上是一组中断处理程序。
    
    //如何在混乱的环境下维护自身统一的状态，是内核的艺术。

       





